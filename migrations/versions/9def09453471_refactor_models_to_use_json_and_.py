"""Refactor models to use JSON and DateTime types

Revision ID: 9def09453471
Revises: 02b06584d4db
Create Date: 2025-08-07 14:58:58.947069

"""
from alembic import op
import sqlalchemy as sa
import json
from datetime import datetime

# revision identifiers, used by Alembic.
revision = '9def09453471'
down_revision = '02b06584d4db'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    # Get the connection
    bind = op.get_bind()

    # Define tables for data migration
    users_table = sa.Table('users', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('player_order', sa.Text),
        sa.Column('last_login', sa.String)
    )
    players_table = sa.Table('players', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('name', sa.String),
        sa.Column('notes_timestamp', sa.String)
    )
    lineups_table = sa.Table('lineups', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('lineup_positions', sa.Text)
    )
    rotations_table = sa.Table('rotations', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('innings', sa.Text)
    )
    games_table = sa.Table('games', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('date', sa.String)
    )
    pitching_outings_table = sa.Table('pitching_outings', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('date', sa.String)
    )
    collaboration_notes_table = sa.Table('collaboration_notes', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('timestamp', sa.String)
    )
    practice_plans_table = sa.Table('practice_plans', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('date', sa.String)
    )
    practice_tasks_table = sa.Table('practice_tasks', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('timestamp', sa.String)
    )
    player_development_focuses_table = sa.Table('player_development_focuses', sa.MetaData(),
        sa.Column('id', sa.Integer, primary_key=True),
        sa.Column('created_date', sa.String),
        sa.Column('completed_date', sa.String),
        sa.Column('last_edited_date', sa.String)
    )

    # --- Data Migration ---

    # Player name to ID mapping
    players = bind.execute(sa.select(players_table.c.id, players_table.c.name)).fetchall()
    player_name_to_id = {name: id for id, name in players}

    # 1. Users table
    users = bind.execute(sa.select(users_table)).fetchall()
    for user in users:
        # Player order
        if user.player_order:
            try:
                order_names = json.loads(user.player_order)
                order_ids = [player_name_to_id[name] for name in order_names if name in player_name_to_id]
                op.execute(
                    users_table.update().where(users_table.c.id == user.id).values(player_order=json.dumps(order_ids))
                )
            except (json.JSONDecodeError, TypeError):
                op.execute(
                    users_table.update().where(users_table.c.id == user.id).values(player_order=json.dumps([]))
                )

        # Last login
        if user.last_login:
            try:
                dt = datetime.strptime(user.last_login, "%Y-%m-%d %H:%M:%S")
                op.execute(
                    users_table.update().where(users_table.c.id == user.id).values(last_login=dt)
                )
            except (ValueError, TypeError):
                pass # Keep as is or set to null if needed

    # 2. Lineups table
    lineups = bind.execute(sa.select(lineups_table)).fetchall()
    for lineup in lineups:
        if lineup.lineup_positions:
            try:
                positions = json.loads(lineup.lineup_positions)
                op.execute(
                    lineups_table.update().where(lineups_table.c.id == lineup.id).values(lineup_positions=json.dumps(positions))
                )
            except (json.JSONDecodeError, TypeError):
                op.execute(
                    lineups_table.update().where(lineups_table.c.id == lineup.id).values(lineup_positions=json.dumps([]))
                )

    # 3. Rotations table
    rotations = bind.execute(sa.select(rotations_table)).fetchall()
    for rotation in rotations:
        if rotation.innings:
            try:
                innings = json.loads(rotation.innings)
                op.execute(
                    rotations_table.update().where(rotations_table.c.id == rotation.id).values(innings=json.dumps(innings))
                )
            except (json.JSONDecodeError, TypeError):
                op.execute(
                    rotations_table.update().where(rotations_table.c.id == rotation.id).values(innings=json.dumps({}))
                )

    # Date/time conversions for other tables
    date_conversion_map = {
        games_table: ['date'],
        pitching_outings_table: ['date'],
        collaboration_notes_table: ['timestamp'],
        practice_plans_table: ['date'],
        practice_tasks_table: ['timestamp'],
        player_development_focuses_table: ['created_date', 'completed_date', 'last_edited_date'],
        players_table: ['notes_timestamp']
    }

    for table, columns in date_conversion_map.items():
        rows = bind.execute(sa.select(table)).fetchall()
        for row in rows:
            for col_name in columns:
                val = getattr(row, col_name)
                if val:
                    try:
                        # Attempt to parse different formats
                        dt = None
                        for fmt in ("%Y-%m-%d %H:%M:%S", "%Y-%m-%d", "%Y-%m-%d %H:%M"):
                            try:
                                dt = datetime.strptime(val, fmt)
                                break
                            except (ValueError, TypeError):
                                continue
                        if dt:
                             op.execute(
                                table.update().where(table.c.id == row.id).values({col_name: dt})
                            )
                    except Exception:
                        pass # Or log the error

    # --- Schema Migration ---
    with op.batch_alter_table('collaboration_notes', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)

    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=False)

    with op.batch_alter_table('lineups', schema=None) as batch_op:
        batch_op.alter_column('lineup_positions',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('pitching_outings', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=False)

    with op.batch_alter_table('player_development_focuses', schema=None) as batch_op:
        batch_op.alter_column('created_date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('completed_date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('last_edited_date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)

    with op.batch_alter_table('players', schema=None) as batch_op:
        batch_op.alter_column('notes_timestamp',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)

    with op.batch_alter_table('practice_plans', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=False)

    with op.batch_alter_table('practice_tasks', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)

    with op.batch_alter_table('rotations', schema=None) as batch_op:
        batch_op.alter_column('innings',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('last_login',
               existing_type=sa.VARCHAR(),
               type_=sa.DateTime(),
               existing_nullable=True)
        batch_op.alter_column('player_order',
               existing_type=sa.TEXT(),
               type_=sa.JSON(),
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade():
    # Downgrade logic would be the reverse, but is more complex
    # as it requires converting structured data back to strings.
    # For now, we will just revert the schema changes.

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('player_order',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)
        batch_op.alter_column('last_login',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    with op.batch_alter_table('rotations', schema=None) as batch_op:
        batch_op.alter_column('innings',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('practice_tasks', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    with op.batch_alter_table('practice_plans', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=False)

    with op.batch_alter_table('players', schema=None) as batch_op:
        batch_op.alter_column('notes_timestamp',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    with op.batch_alter_table('player_development_focuses', schema=None) as batch_op:
        batch_op.alter_column('last_edited_date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('completed_date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)
        batch_op.alter_column('created_date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    with op.batch_alter_table('pitching_outings', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=False)

    with op.batch_alter_table('lineups', schema=None) as batch_op:
        batch_op.alter_column('lineup_positions',
               existing_type=sa.JSON(),
               type_=sa.TEXT(),
               existing_nullable=True)

    with op.batch_alter_table('games', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=False)

    with op.batch_alter_table('collaboration_notes', schema=None) as batch_op:
        batch_op.alter_column('timestamp',
               existing_type=sa.DateTime(),
               type_=sa.VARCHAR(),
               existing_nullable=True)

    # ### end Alembic commands ###
